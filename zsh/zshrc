# .zshrc

# powerline10k {{{

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  # source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

# }}}

# completion {{{

# set fpath before calling compinit
fpath=($HOME/.zsh/complete $fpath)

# call compinit - @see https://gist.github.com/ctechols/ca1035271ad134841284
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

#
# end completion }}}

# zgen {{{
#

if [ -f $HOME/.zgen-setup ]; then
  source $HOME/.zgen-setup
fi

#
# end zgen }}}

# environment variables {{{
#

# paranoid file permissions
#umask 007

# less paranoid file permissions
umask 002

# allow for core dumps
#ulimit -c unlimited

# allow for more file descriptors
ulimit -n 2048

# HiDPI display settings
export GDK_SCALE=2
export GDK_DPI_SCALE=0.5
export QT_AUTO_SCREEN_SCALE_FACTOR=1

# locale settings
# using "C" is useful for expected sorting of filenames
# export LC_ALL="C.UTF-8"  # use this for foreign character support
# export LC_ALL="C"        # use this if the next commands do not work...
#
# Enforce correct locales from the beginning:
# LC_ALL is unset since it overwrites everything
# LANG=en_US.UTF-8 is used, except for:
# LC_COLLATE=C   C-language conventions are used for sorting
# LC_MESSAGES=C  never translates program output
# LC_TIME=en_DK  produces yyyy-mm-dd hh:mm date/time output
#unset LC_ALL
export LANGUAGE="en_US:en"
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_COLLATE="C"
export LC_MESSAGES="C"
export LC_TIME="en_DK.UTF-8"

# settings for 'less'
#export PAGER='$HOME/bin/less.sh'  # start vim with less.vim
#export PAGER='/usr/bin/less'
export LESS="-eiMRX"
export LESSOPEN="|$HOME/bin/lesspipe.sh %s"
#export LESSOPEN="|/usr/bin/lesspipe %s"

# use bat as default pager; also see $HOME/.config/bat/config
export PAGER='/usr/bin/bat'
export MANPAGER='/usr/bin/bat'
export BAT_PAGER='/usr/bin/less -eiMRX'

# terminal
#export TERM=rxvt-unicode-256color

# todo.txt
export TODOTXT_DEFAULT_ACTION=ls

# gitlab-cli variables
export GITLAB_API_ENDPOINT=https://webtools.unch.unc.edu/gitlab/api/v4
export GITLAB_API_PRIVATE_TOKEN=w_TmjwcFYukeSx_RHzXz
# This one is optional and can be used to set any HTTParty option you may need
# using YAML hash syntax. For example, this is how you would disable SSL
# verification (useful if using a self-signed cert).
#export GITLAB_API_HTTPARTY_OPTIONS="{verify: false}"

# common variables
export EDITOR='/usr/bin/nvim'  # '/usr/bin/vim'
export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR

# fzf + rg + bat
export FZF_DEFAULT_OPTS='--height=70% --preview="/usr/bin/bat --style=numbers --color=always {}" --preview-window=right:60%:wrap'
export FZF_DEFAULT_COMMAND='/usr/bin/rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# zsh variables
export COMPLETION_WAITING_DOTS="true"
export DISABLE_CORRECTION="true"
export HISTIGNORE="&:ls:[bf]g:exit:reset:clear:cd:cd .."
export HISTSIZE=25000
export SAVEHIST=10000
export UPDATE_ZSH_DAYS=1

# zsh plugin variables
export PER_DIRECTORY_HISTORY_TOGGLE='^g'

#
# end environment variables }}}

# other settings {{{
#

# zsh options; @see http://zsh.sourceforge.net/Doc/Release/Options.html
setopt always_to_end
setopt auto_cd
setopt no_auto_remove_slash
setopt append_history
#setopt noclobber
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt hist_verify
#setopt inc_append_history_time
setopt rm_star_wait
setopt share_history

cdpath=($HOME $HOME/repos/webapps $HOME/repos/$USER $HOME/dotfiles)

# enable debugging (useful for declare/typeset builtins)
# shopt extdebug > /dev/null || shopt -s extdebug

# vi-mode
bindkey -v
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

#
# end other settings }}}

# Base16 Shell {{{
#

#BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

#
# }}}

# aliases, functions, and themes {{{
#

# remove a few aliases created by zsh plugins
function unaliasPlugins() {
    typeset -a commands=('g' 'ls' 'la' 'lr' 'lt' 'll' 'ldot' 'lS' 'lart' 'lrt' ':q' 'zz')
    for command in $commands; do
        type=`whence -w $command | /usr/bin/cut -d' ' -f2`
        if [ $type = "alias" ]; then
            unalias $command
        fi
    done
    # realias 'zz'
    alias zz='_fzz'
}
unaliasPlugins

source $HOME/dotfiles/zsh/aliases.zsh
source $HOME/dotfiles/zsh/functions.zsh
#source $HOME/dotfiles/zsh/my.zsh-theme

# pure prompt
#autoload -U promptinit; promptinit
#prompt pure

#
# end aliases, functions, and themes }}}

# PATH settings {{{

export CPATH=/usr/include/glib-2.0:/usr/lib/x86_64-linux-gnu/glib-2.0/include:/usr/include/libsecret-1

# go programming language
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH

# ruby programming language
if which ruby >/dev/null && which gem >/dev/null; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# rust programming language
export PATH="$HOME/.cargo/bin:$PATH"

# personal PATH directories
export PATH=/usr/local/bin:$HOME/bin:$HOME/.local/bin:/snap/bin:$PATH

#
# end PATH settings }}}

# other programs {{{
#

# settings for other programs which modify PATH may be appended to the end of this file

# fzf - fuzzy finder
[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f $HOME/.p10k.zsh ]] || source $HOME/.p10k.zsh

# rvm
#export PATH="$PATH:$HOME/.rvm/bin" # Load RVM *onto the PATH*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# sdkman
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

#
# end other programs }}}

#
# vim: set ft=zsh fdm=marker:


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
